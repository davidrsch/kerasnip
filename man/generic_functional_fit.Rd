% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_functional_fit.R
\name{generic_functional_fit}
\alias{generic_functional_fit}
\title{Generic Keras Functional API Model Fitting Implementation}
\usage{
generic_functional_fit(x, y, layer_blocks, ...)
}
\arguments{
\item{x}{A data frame or matrix of predictors.}

\item{y}{A vector of outcomes.}

\item{layer_blocks}{A named list of layer block functions. This is passed
internally from the \code{parsnip} model specification.}

\item{...}{Additional arguments passed down from the model specification.
These can include:
\itemize{
\item \strong{Layer Parameters:} Arguments for the layer blocks, prefixed
with the block name (e.g., \code{dense_units = 64}).
\item \strong{Architecture Parameters:} Arguments to control the number
of times a block is repeated, in the format \verb{num_\{block_name\}} (e.g.,
\code{num_dense = 2}).
\item \strong{Compile Parameters:} Arguments to customize model
compilation, prefixed with \code{compile_} (e.g., \code{compile_loss = "mae"},
\code{compile_optimizer = "sgd"}).
\item \strong{Fit Parameters:} Arguments to customize model fitting,
prefixed with \code{fit_} (e.g., \code{fit_callbacks = list(...)},
\code{fit_class_weight = list(...)}).
}}
}
\value{
A list containing the fitted model and other metadata. This list is
stored in the \code{fit} slot of the \code{parsnip} model fit object. The list
contains the following elements:
\itemize{
\item \code{fit}: The raw, fitted Keras model object.
\item \code{history}: The Keras training history object.
\item \code{lvl}: A character vector of the outcome factor levels (for
classification) or \code{NULL} (for regression).
}
}
\description{
This function is the internal engine for fitting models generated by
\code{create_keras_functional_spec()}. It is not intended to be called directly
by the user.
}
\details{
This function performs the following key steps:
\enumerate{
\item \strong{Argument & Data Preparation:} It resolves arguments passed
from \code{parsnip} (handling \code{rlang_zap} objects for unspecified arguments)
and prepares the \code{x} and \code{y} data for Keras. It automatically determines
the \code{input_shape} from \code{x} and, for classification, the \code{num_classes}
from \code{y}.
\item \strong{Dynamic Model Construction:} It builds the Keras model graph
by processing the \code{layer_blocks} list.
\itemize{
\item \strong{Connectivity:} The graph is connected by matching the
argument names of each block function to the names of previously
defined blocks. For example, a block \verb{function(input_a, ...)} will
receive the output tensor from the block named \code{input_a}.
\item \strong{Repetition:} It checks for \verb{num_\{block_name\}} arguments
to repeat a block multiple times, creating a chain of identical
layers. A block can only be repeated if it has exactly one input
tensor from another block.
}
\item \strong{Model Compilation:} It compiles the final Keras model. The
compilation arguments (optimizer, loss, metrics) can be customized by
passing arguments prefixed with \code{compile_} (e.g., \code{compile_loss = "mae"}).
\item \strong{Model Fitting:} It calls \code{keras3::fit()} to train the model
on the prepared data.
}
}
\keyword{internal}
