% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_sequential_fit.R
\name{generic_sequential_fit}
\alias{generic_sequential_fit}
\title{Generic Keras Model Fitting Implementation}
\usage{
generic_sequential_fit(
  x,
  y,
  layer_blocks,
  epochs = 10,
  batch_size = 32,
  learn_rate = 0.01,
  validation_split = 0.2,
  verbose = 0,
  ...
)
}
\arguments{
\item{x}{A data frame or matrix of predictors.}

\item{y}{A vector of outcomes.}

\item{layer_blocks}{A named list of layer block functions. This is passed
internally from the \code{parsnip} model specification.}

\item{epochs}{An integer for the number of training iterations.}

\item{batch_size}{An integer for the number of samples per gradient update.
This is a tunable parameter and is passed to \code{keras3::fit()}.}

\item{learn_rate}{A double for the learning rate, used to configure the
default Adam optimizer.}

\item{validation_split}{The proportion of the training data to use for
the validation set.}

\item{verbose}{An integer for the verbosity of the fitting process (0, 1, or 2).}

\item{...}{Additional arguments passed down from the model specification. These
can include:
\itemize{
\item \strong{Layer Parameters:} Arguments for the layer blocks, prefixed
with the block name (e.g., \code{dense_units = 64}).
\item \strong{Architecture Parameters:} Arguments to control the number of
times a block is repeated, in the format \verb{num_\{block_name\}} (e.g.,
\code{num_dense = 2}).
\item \strong{Compile Parameters:} Arguments to customize model compilation,
prefixed with \code{compile_} (e.g., \code{compile_loss = "mae"},
\code{compile_optimizer = "sgd"}).
\item \strong{Fit Parameters:} Arguments to customize model fitting,
prefixed with \code{fit_} (e.g., \code{fit_callbacks = list(...)},
\code{fit_class_weight = list(...)}).
}}
}
\value{
A \code{parsnip} model fit object.
}
\description{
This function is the internal engine for fitting models generated by \code{create_keras_sequential_spec()}.
It is not intended to be called directly by the user.
}
\details{
This function performs several key steps:
\enumerate{
\item \strong{Argument & Data Preparation:} It resolves arguments from \code{parsnip}
and prepares the \code{x} and \code{y} data for Keras. It automatically determines
the \code{input_shape} from \code{x} and, for classification, the \code{num_classes} from \code{y}.
\item \strong{Dynamic Model Construction:} The user is responsible for defining the
entire model architecture via \code{layer_blocks}. The function iterates through
the blocks in the order they are provided:
\itemize{
\item The first block function \strong{must initialize the model}, typically
by calling \code{keras3::keras_model_sequential()}. It can accept an
\code{input_shape} argument, which will be provided automatically.
\item Subsequent blocks receive the model and add layers to it.
\item An output layer block can accept a \code{num_classes} argument, which is
provided automatically for classification models.
}
\item \strong{Model Compilation:} It compiles the final Keras model. The
compilation arguments (optimizer, loss, metrics) can be customized:
\itemize{
\item Override defaults by passing arguments prefixed with \code{compile_}
(e.g., \code{compile_loss = "mae"}, \code{compile_optimizer = "sgd"}).
}
\item \strong{Model Fitting:} It calls \code{keras3::fit()} to train the model on
the prepared data.
}
}
\keyword{internal}
